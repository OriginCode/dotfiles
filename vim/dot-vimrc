set encoding=utf-8
set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'wincent/command-t'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
" Plug 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
Plug 'dag/vim-fish'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/async.vim'
Plug 'mattn/vim-lsp-settings'
Plug 'rust-lang/rust.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'arcticicestudio/nord-vim'
Plug 'morhetz/gruvbox'
Plug 'mhinz/vim-startify'
Plug 'tpope/vim-obsession'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
Plug 'github/copilot.vim'
Plug 'alvan/vim-closetag'
Plug 'lervag/vimtex'
Plug 'kaarmu/typst.vim'
Plug 'tpope/vim-sleuth'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'jpalardy/vim-slime'
Plug 'liuchengxu/graphviz.vim'
call plug#end()

syntax enable

let g:airline_powerline_fonts = 1
let g:gruvbox_italic = 1
colorscheme gruvbox
set background=dark

let g:minBufExplForceSyntaxEnable = 1

if ! has('gui_running')
   set ttimeoutlen=10
   augroup FastEscape
      autocmd!
      au InsertEnter * set timeoutlen=0
      au InsertLeave * set timeoutlen=1000
   augroup END
endif

set laststatus=2 " Always display the statusline in all windows
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
nmap <silent> <c-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" Start NERDTree and put the cursor back in the other window.
" autocmd VimEnter * NERDTree | wincmd p
" Open NERDTree in every tab
" autocmd BufWinEnter * NERDTreeMirror

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

set nu

let mapleader=","
let maplocalleader="-"

if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" set tabstop=4
" set shiftwidth=4
" set expandtab

set mouse=a

set statusline+=%#warningmsg#
set statusline+=%*

let g:netrw_liststyle = 3
let g:netrw_winsize = 25
let g:netrw_browse_split = 3

" Markdown no folding
let g:vim_markdown_folding_disabled = 1

set pastetoggle=<F3>
nnoremap <F2> :term<CR>
nnoremap <F4> :open

" asynccomplete.vim
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
inoremap <expr> <cr> pumvisible() ? asyncomplete#close_popup() . "\<cr>" : "\<cr>"

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" vim-lsp: Register rust-analyzer
if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
        \   'name': 'Rust Language Server',
        \   'cmd': {server_info->['rust-analyzer']},
        \   'whitelist': ['rust'],
        \ })
endif

" vim-closetag
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" auto format rust code on save
let g:rustfmt_autosave = 1

" Enable folding in LSP
" set foldmethod=expr
"   \ foldexpr=lsp#ui#vim#folding#foldexpr()
"   \ foldtext=lsp#ui#vim#folding#foldtext()

" disable copilot by default
let b:copilot_enabled = 0

" Typst LSP
if executable('typst-lsp')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typst-lsp',
        \ 'cmd': {server_info->['typst-lsp']},
        \ 'allowlist': ['typst'],
        \ })
endif

" ultisnips keybindings
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" vim-slime target
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{last}"}
" let g:slime_target = "vimterminal"
" let g:slime_vimterminal_cmd = "racket"

" workaround for conflict with vim-slime
nnoremap <C-c> <nop>

" default output format for GraphViz
let g:graphviz_output_format = 'png'

" enable true color support
set termguicolors

" show bracket match pairs
set showmatch
